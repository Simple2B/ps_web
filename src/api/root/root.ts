/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 1.0.4
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  HTTPValidationError
} from '.././model'



/**
 * @summary Root
 */
export const rootRoot = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    return axios.default.get(
      `/`,options
    );
  }


export const getRootRootQueryKey = () => {
    return [`/`] as const;
    }

    
export const getRootRootQueryOptions = <TData = Awaited<ReturnType<typeof rootRoot>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootRoot>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRootRootQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof rootRoot>>> = ({ signal }) => rootRoot({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof rootRoot>>, TError, TData> & { queryKey: QueryKey }
}

export type RootRootQueryResult = NonNullable<Awaited<ReturnType<typeof rootRoot>>>
export type RootRootQueryError = AxiosError<unknown>

/**
 * @summary Root
 */
export const useRootRoot = <TData = Awaited<ReturnType<typeof rootRoot>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootRoot>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getRootRootQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Wildcard Path
 */
export const rootWildcardPath = (
    wildcardPath: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    return axios.default.get(
      `/${wildcardPath}`,options
    );
  }


export const getRootWildcardPathQueryKey = (wildcardPath: string,) => {
    return [`/${wildcardPath}`] as const;
    }

    
export const getRootWildcardPathQueryOptions = <TData = Awaited<ReturnType<typeof rootWildcardPath>>, TError = AxiosError<HTTPValidationError>>(wildcardPath: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootWildcardPath>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRootWildcardPathQueryKey(wildcardPath);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof rootWildcardPath>>> = ({ signal }) => rootWildcardPath(wildcardPath, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(wildcardPath), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof rootWildcardPath>>, TError, TData> & { queryKey: QueryKey }
}

export type RootWildcardPathQueryResult = NonNullable<Awaited<ReturnType<typeof rootWildcardPath>>>
export type RootWildcardPathQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Wildcard Path
 */
export const useRootWildcardPath = <TData = Awaited<ReturnType<typeof rootWildcardPath>>, TError = AxiosError<HTTPValidationError>>(
 wildcardPath: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof rootWildcardPath>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getRootWildcardPathQueryOptions(wildcardPath,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



