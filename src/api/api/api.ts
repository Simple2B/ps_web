/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 1.0.4
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  CreateUser,
  HTTPValidationError,
  Token,
  User,
  UserLogin
} from '.././model'



/**
 * @summary Token
 */
export const aPIToken = (
    userLogin: UserLogin, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Token>> => {
    
    return axios.default.post(
      `/api/auth/token`,
      userLogin,options
    );
  }



export const getAPITokenMutationOptions = <TError = AxiosError<void | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof aPIToken>>, TError,{data: UserLogin}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof aPIToken>>, TError,{data: UserLogin}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof aPIToken>>, {data: UserLogin}> = (props) => {
          const {data} = props ?? {};

          return  aPIToken(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type APITokenMutationResult = NonNullable<Awaited<ReturnType<typeof aPIToken>>>
    export type APITokenMutationBody = UserLogin
    export type APITokenMutationError = AxiosError<void | HTTPValidationError>

    /**
 * @summary Token
 */
export const useAPIToken = <TError = AxiosError<void | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof aPIToken>>, TError,{data: UserLogin}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof aPIToken>>,
        TError,
        {data: UserLogin},
        TContext
      > => {

      const mutationOptions = getAPITokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Register
 */
export const aPIRegister = (
    createUser: CreateUser, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    return axios.default.post(
      `/api/auth/register`,
      createUser,options
    );
  }



export const getAPIRegisterMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof aPIRegister>>, TError,{data: CreateUser}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof aPIRegister>>, TError,{data: CreateUser}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof aPIRegister>>, {data: CreateUser}> = (props) => {
          const {data} = props ?? {};

          return  aPIRegister(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type APIRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof aPIRegister>>>
    export type APIRegisterMutationBody = CreateUser
    export type APIRegisterMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Register
 */
export const useAPIRegister = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof aPIRegister>>, TError,{data: CreateUser}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof aPIRegister>>,
        TError,
        {data: CreateUser},
        TContext
      > => {

      const mutationOptions = getAPIRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Whoami
 */
export const aPIWhoami = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    return axios.default.get(
      `/api/user/whoami`,options
    );
  }


export const getAPIWhoamiQueryKey = () => {
    return [`/api/user/whoami`] as const;
    }

    
export const getAPIWhoamiQueryOptions = <TData = Awaited<ReturnType<typeof aPIWhoami>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof aPIWhoami>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAPIWhoamiQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof aPIWhoami>>> = ({ signal }) => aPIWhoami({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof aPIWhoami>>, TError, TData> & { queryKey: QueryKey }
}

export type APIWhoamiQueryResult = NonNullable<Awaited<ReturnType<typeof aPIWhoami>>>
export type APIWhoamiQueryError = AxiosError<unknown>

/**
 * @summary Whoami
 */
export const useAPIWhoami = <TData = Awaited<ReturnType<typeof aPIWhoami>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof aPIWhoami>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getAPIWhoamiQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary List Endpoints
 */
export const aPIListEndpoints = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    
    return axios.default.get(
      `/api/list-endpoints/`,options
    );
  }


export const getAPIListEndpointsQueryKey = () => {
    return [`/api/list-endpoints/`] as const;
    }

    
export const getAPIListEndpointsQueryOptions = <TData = Awaited<ReturnType<typeof aPIListEndpoints>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof aPIListEndpoints>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAPIListEndpointsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof aPIListEndpoints>>> = ({ signal }) => aPIListEndpoints({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof aPIListEndpoints>>, TError, TData> & { queryKey: QueryKey }
}

export type APIListEndpointsQueryResult = NonNullable<Awaited<ReturnType<typeof aPIListEndpoints>>>
export type APIListEndpointsQueryError = AxiosError<unknown>

/**
 * @summary List Endpoints
 */
export const useAPIListEndpoints = <TData = Awaited<ReturnType<typeof aPIListEndpoints>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof aPIListEndpoints>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getAPIListEndpointsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



