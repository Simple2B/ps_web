/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 1.0.3
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  BodyAPILogin,
  CreateUser,
  HTTPValidationError,
  Token,
  User
} from '.././model'



/**
 * @summary Login
 */
export const aPILogin = (
    bodyAPILogin: BodyAPILogin, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Token>> => {const formUrlEncoded = new URLSearchParams();
if(bodyAPILogin.grant_type !== undefined) {
 formUrlEncoded.append('grant_type', bodyAPILogin.grant_type)
 }
formUrlEncoded.append('username', bodyAPILogin.username)
formUrlEncoded.append('password', bodyAPILogin.password)
if(bodyAPILogin.scope !== undefined) {
 formUrlEncoded.append('scope', bodyAPILogin.scope)
 }
if(bodyAPILogin.client_id !== undefined) {
 formUrlEncoded.append('client_id', bodyAPILogin.client_id)
 }
if(bodyAPILogin.client_secret !== undefined) {
 formUrlEncoded.append('client_secret', bodyAPILogin.client_secret)
 }

    
    return axios.default.post(
      `/api/auth/login`,
      formUrlEncoded,options
    );
  }



export const getAPILoginMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof aPILogin>>, TError,{data: BodyAPILogin}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof aPILogin>>, TError,{data: BodyAPILogin}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof aPILogin>>, {data: BodyAPILogin}> = (props) => {
          const {data} = props ?? {};

          return  aPILogin(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type APILoginMutationResult = NonNullable<Awaited<ReturnType<typeof aPILogin>>>
    export type APILoginMutationBody = BodyAPILogin
    export type APILoginMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Login
 */
export const useAPILogin = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof aPILogin>>, TError,{data: BodyAPILogin}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof aPILogin>>,
        TError,
        {data: BodyAPILogin},
        TContext
      > => {

      const mutationOptions = getAPILoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Register
 */
export const aPIRegister = (
    createUser: CreateUser, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    return axios.default.post(
      `/api/auth/register`,
      createUser,options
    );
  }



export const getAPIRegisterMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof aPIRegister>>, TError,{data: CreateUser}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof aPIRegister>>, TError,{data: CreateUser}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof aPIRegister>>, {data: CreateUser}> = (props) => {
          const {data} = props ?? {};

          return  aPIRegister(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type APIRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof aPIRegister>>>
    export type APIRegisterMutationBody = CreateUser
    export type APIRegisterMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Register
 */
export const useAPIRegister = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof aPIRegister>>, TError,{data: CreateUser}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof aPIRegister>>,
        TError,
        {data: CreateUser},
        TContext
      > => {

      const mutationOptions = getAPIRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    